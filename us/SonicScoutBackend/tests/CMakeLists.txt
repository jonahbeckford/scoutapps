# Recommendation: Place this file in source control.
# Auto-generated by `./dk dksdk.project.new` of SquirrelScout.
# You can edit this file, but typically the place to
# add tests is in the subdirectory `fast-target`.

# Re-usable entry point for tests. DKSDK_TESTING_MAIN_C is used
# by subdirectories.
set(DKSDK_TESTING_MAIN_C ${CMAKE_CURRENT_SOURCE_DIR}/_main.c CACHE FILEPATH "")
DkSDKProject_CreateMainC(OUTPUT ${DKSDK_TESTING_MAIN_C})

# Unit test packages use `DkSDKProject_AddPackage(... TESTS)`
# - They always should be configured because they generate `.opam` files 
#   and influence `dune-project`. We want source code idempotency; that is,
#   the generated source code (ex. `dune-project`) should not vary simply
#   because BUILD_TESTING is ON or OFF.
add_subdirectory(SonicScout_Units)

# The following integration tests do not modify source code. We save time by
# not configuring them when BUILD_TESTING is OFF.
if (BUILD_TESTING)
    add_subdirectory(inspect-target)

    # Do build-and-test tests
    #   Binary directory is short to minimize exceeding 260-char Windows limit
    add_subdirectory(build-and-test "${PROJECT_BINARY_DIR}/_bt")

    # Set APPLE_HOST_FAST_EMULATE_x86_64
    include(DkSDKDetectEmulation)
    check_apple_host_fast_emulate_x86_64()

    # Calculate whether we are cross-compiling.
    set(is_cross_compiling OFF)
    if(CMAKE_OCamlDune_COMPILER)
        # LANGUAGES OCamlDune is enabled
        if (CMAKE_OCamlDune_TARGET_IS_COMPATIBLE_HOST_ABI
                OR (CMAKE_OCamlDune_TARGET_ABI MATCHES "^darwin_" AND APPLE_HOST_FAST_EMULATE_x86_64))
            # Host compiling
        else ()
            # Cross-compiling
            set(is_cross_compiling ON)
            message(STATUS "No fast target ABI executable tests will be run because target ABI ${CMAKE_OCamlDune_TARGET_ABI} is being cross-compiled on ${CMAKE_OCamlDune_HOST_ABI}, and no fast emulator is available")
        endif ()
    else()
        # No LANGUAGES OCamlDune. Use conventional CMake variable
        set(is_cross_compiling ${CMAKE_CROSSCOMPILING})
        if(is_cross_compiling)
            message(STATUS "No fast target ABI executable tests will be run because the target ABI (${CMAKE_C_COMPILER_ARCHITECTURE_ID}/${CMAKE_C_COMPILER_TARGET}/${CMAKE_C_COMPILER_ABI}) is being cross-compiled")
        endif()
    endif() # if(CMAKE_OCamlDune_COMPILER)

    # Do the fast target if and only if not cross-compiling
    if(NOT is_cross_compiling)
        add_subdirectory(fast-target)
    endif()
endif ()