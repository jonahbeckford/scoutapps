let build_reldir = Fpath.v "build_dev"
let user_presets_relfile = Fpath.v "CMakeUserPresets.json"

let clean areas =
  let open Utils in
  let open Bos in
  let cwd = OS.Dir.current () |> rmsg in
  let projectdir = Fpath.(cwd / "us" / "SonicScoutAndroid") in
  let fetch = Fpath.(projectdir / "fetch") in
  if List.mem `DkSdkCMake areas then begin
    start_step "Cleaning SonicScoutAndroid dksdk-cmake source code";
    DkFs_C99.Path.rm ~recurse:() ~force:() ~kill:()
      Fpath.[ fetch / "dksdk-cmake" ]
    |> rmsg
  end;
  if List.mem `MavenRepository areas then begin
    start_step "Cleaning Maven repositories (Java artifacts for DkSDK only)";
    let m2repo =
      if Sys.win32 then
        Fpath.(v (Sys.getenv "USERPROFILE") / ".m2" / "repository")
      else Fpath.(v (Sys.getenv "HOME") / ".m2" / "repository")
    in
    DkFs_C99.Path.rm ~recurse:() ~force:() ~kill:()
      Fpath.
        [
          m2repo / "com" / "diskuv" / "dksdk" / "core";
          m2repo / "com" / "diskuv" / "dksdk" / "ffi";
        ]
    |> rmsg
  end;
  if List.mem `AndroidGradleCxx areas then begin
    start_step "Cleaning SonicScoutAndroid Android Gradle C++ artifacts";
    DkFs_C99.Path.rm ~recurse:() ~force:() ~kill:()
      Fpath.[ projectdir / "data" / ".cxx" ]
    |> rmsg
  end;
  if List.mem `AndroidBuilds areas then begin
    start_step "Cleaning SonicScoutAndroid build artifacts";
    DkFs_C99.Path.rm ~recurse:() ~force:() ~kill:()
      Fpath.
        [
          projectdir / ".gradle";
          projectdir / "local.properties";
          projectdir / "dkconfig" / "build";
          projectdir / "data" / "build";
          projectdir / "app" / "build";
          projectdir // user_presets_relfile;
        ]
    |> rmsg;
    let ffijava = Fpath.(fetch / "dksdk-ffi-java") in
    DkFs_C99.Path.rm ~recurse:() ~force:() ~kill:()
      Fpath.
        [
          ffijava / "buildSrc" / "build";
          ffijava / "core" / "buildSrc" / "build";
          ffijava / "core" / "abi" / "build";
          ffijava / "core" / "gradle" / "build";
          ffijava / "ffi-java" / "build";
          ffijava / "ffi-java-android" / "build";
          ffijava / "ffi-java-android-standalone" / "build";
          ffijava / "ffi-java-jdk8" / "build";
          ffijava / "ffi-java-jdk11" / "build";
        ]
    |> Utils.rmsg
  end

(** [generate_setup_properties] creates a ["setup.properties"] to communicate
    configuration in SonicScout_Setup into Gradle. *)
let generate_setup_properties ~projectdir ~cwd ~slots () =
  let open Bos in
  let ninja_dir = Slots.ninja_dir slots in
  (* keep the directories forward-slashed so readable *)
  let setup_properties = Fpath.(projectdir / "setup.properties") in
  let content =
    [
      Printf.sprintf "# Generated by %s script" __MODULE_ID__;
      Printf.sprintf "FETCHCONTENT_SOURCE_DIR_DKSDK-ACCESS = %s"
        (Utils.mixed_path Fpath.(cwd / "fetch" / "dksdk-access"));
      Printf.sprintf "FETCHCONTENT_SOURCE_DIR_DKSDK-CMAKE = %s"
        (Utils.mixed_path Fpath.(cwd / "fetch" / "dksdk-cmake"));
      Printf.sprintf "SonicScoutBackend_SOURCE_DIR = %s"
        (Utils.mixed_path Fpath.(cwd / "us" / "SonicScoutBackend"));
      Printf.sprintf "CMAKE_MAKE_PROGRAM = %s"
        (Utils.mixed_path
           Fpath.(ninja_dir / if Sys.win32 then "ninja.exe" else "ninja"));
    ]
  in
  let content =
    match Slots.msys2 slots with
    | None -> content
    | Some msys2 ->
        content
        @ [ Printf.sprintf "DKSDK_MSYS2_DIR = %s" (Utils.mixed_path msys2) ]
  in
  OS.File.write_lines setup_properties content |> Utils.rmsg

let run ?opts ~slots () =
  let open Bos in
  Utils.start_step "Building SonicScoutAndroid";
  let cwd = OS.Dir.current () |> Utils.rmsg in
  let fetch = Fpath.(cwd / "fetch") in
  let fetch_java = Fpath.(to_string (fetch / "dksdk-ffi-java")) in
  let fetch_java_core = Fpath.(to_string (fetch / "dksdk-ffi-java" / "core")) in
  let dk_env = Utils.dk_env ?opts () in
  let dk = Utils.dk ~env:dk_env ~slots in
  let dkmlHostAbi =
    match Tr1HostMachine.abi with
    | `darwin_x86_64 -> "darwin_x86_64"
    | `darwin_arm64 -> "darwin_arm64"
    | `windows_x86_64 -> "windows_x86_64"
    | `windows_x86 -> "windows_x86"
    | `linux_x86_64 -> "linux_x86_64"
    | `linux_x86 -> "linux_x86"
    | _ ->
        failwith "Currently your host machine is not supported by Sonic Scout"
  in

  (* JDK *)
  dk [ "dksdk.java.jdk.download"; "NO_SYSTEM_PATH"; "JDK"; "8" ];
  dk [ "dksdk.java.jdk.download"; "NO_SYSTEM_PATH"; "JDK"; "17" ];
  let slots =
    Slots.add_jdk slots Fpath.(cwd / ".ci" / "local" / "share" / "jdk")
  in

  (* Gradle *)
  if Sys.win32 then
    Logs.info (fun l -> l "NOTE: Extracting Gradle can take several minutes");
  dk [ "dksdk.gradle.download"; "ALL"; "NO_SYSTEM_PATH" ];
  let slots =
    Slots.add_gradle_home slots
      Fpath.(cwd / ".ci" / "local" / "share" / "gradle")
  in

  (* Packages: NDK (Side by side) + Android SDK Platform *)
  dk [ "dksdk.android.ndk.download"; "NO_SYSTEM_PATH" ];
  (* Package: Google APIs Intel x86_64 Atom System Image *)
  dk
    [
      "dksdk.android.pkg.download";
      "PACKAGE";
      (* Encode [system-images;android-31;google_apis;x86_64] *)
      "system-images#android-31#google_apis#x86_64";
    ];
  (* Package: Android Emulator *)
  dk [ "dksdk.android.pkg.download"; "PACKAGE"; "emulator" ];
  (* Package: Android SDK Platform-Tools (not the same as Android SDK Platform!) *)
  dk [ "dksdk.android.pkg.download"; "PACKAGE"; "platform-tools" ];
  let slots =
    Slots.add_android_sdk_dir slots
      Fpath.(cwd / ".ci" / "local" / "share" / "android-sdk")
  in

  let projectdir = Fpath.(cwd / "us" / "SonicScoutAndroid") in
  OS.Dir.with_current projectdir
    (fun () ->
      (* Configure setup.properties *)
      generate_setup_properties ~projectdir ~cwd ~slots ();

      (* Display the Java toolchains. https://docs.gradle.org/current/userguide/toolchains.html *)
      RunGradle.run ~env:dk_env ~debug_env:() ~projectdir ~slots
        [ "-p"; fetch_java_core; "-q"; "javaToolchains" ];
      RunGradle.run ~env:dk_env ~debug_env:() ~projectdir ~slots
        [
          "-p";
          fetch_java_core;
          ":abi:publishToMavenLocal";
          ":gradle:publishToMavenLocal";
        ];

      (* Generate a valid local.properties since CMake will be needed
         for the next RunGradle.run commands. *)
      RunGradle.generate_local_properties ~projectdir ~slots ();

      let cmake =
        let c = Slots.cmake_home slots in
        Fpath.(c / "bin" / "cmake")
      in
      RunGradle.run ~env:dk_env ~debug_env:() ~projectdir ~slots
        [
          "-p";
          fetch_java;
          ":ffi-java:publishToMavenLocal";
          "-P";
          Fmt.str "cmakeCommand=%a" Fpath.pp cmake;
          "-P";
          "disableAndroidNdk=1";
          "-P";
          Fmt.str "dkmlHostAbi=%s" dkmlHostAbi;
        ];
      RunGradle.run ~env:dk_env ~debug_env:() ~projectdir ~slots
        [
          "-p";
          fetch_java;
          ":ffi-java-android:publishToMavenLocal";
          "-P";
          Fmt.str "cmakeCommand=%a" Fpath.pp cmake;
          "-P";
          "disableAndroidNdk=1";
          "-P";
          Fmt.str "dkmlHostAbi=%s" dkmlHostAbi;
        ])
    ()
  |> Utils.rmsg;
  slots
